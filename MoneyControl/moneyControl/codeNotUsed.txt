//System.out.println("\nHere are the duplicate elements For September : " + findDuplicates(arrayOfdescSep));
		/*if (!findDuplicates(arrayOfdescSep).isEmpty()){
		AddTheDuplicates (arrayOfamountSep);
		RemoveDuplicates(arrayOfdescSep);
		}*/
		//System.out.println("\nHere are the duplicate elements For October : " + findDuplicates(arrayOfdescOct));
		//if (!findDuplicates(arrayOfdescOct).isEmpty()){
		//AddTheDuplicates (arrayOfamountOct);
		//RemoveDuplicates(arrayOfdescOct);

/*public static Set<String> findDuplicates(ArrayList<String> arrayOfdesc)
	{ 
	  final Set<String> setToReturn = new HashSet<String>(); 
	  final Set<String> set1 = new HashSet<String>();
	  
	   ArrayList <Integer> setIndex = new ArrayList<>();
	  int i=0;
	  for ( i=0; i<arrayOfdesc.size(); i++)
	  {	   
	   if (!set1.add(arrayOfdesc.get(i) ))
	   { 
	    setToReturn.add(arrayOfdesc.get(i));
	    descriptionToindexMap.put(arrayOfdesc.get(i), ""+i);
	    }    
	    for ( int j=0; j<i; j++){
	    if (arrayOfdesc.get(i).equals(arrayOfdesc.get(j))){
	    	setIndex.add(j);
	    	descriptionToindexMap.put(arrayOfdesc.get(j), ""+j); 
	    }
	    }  
	  }	
	  return setToReturn;
	}*/
	
	/*public static void AddTheDuplicates (ArrayList <Double> arrayOfamount){
		String key="";
		java.util.List<String> value = null;
		double sumFirst=0.0;
		double sumSecond=0.0;
		ArrayList <Integer> indexesOfamount = new ArrayList<>();
		for (int l=0; l<arrayOfamount.size(); l++){
			indexesOfamount.add(l);
			Collections.sort(indexesOfamount);
		}
		int counter=0;
		for (Entry<String, java.util.List<String>> entry : descriptionToindexMap.entrySet()) {
			counter++;   
			key = entry.getKey();
			value = entry.getValue();
			   
			   for (int k=0; k<value.size(); k++) {
				   Set<String> tempSetForDuplicates = new HashSet<>();//this is to remove duplicates
				   tempSetForDuplicates.addAll(value);//from the descriptions list named value
				   value.clear();
				   value.addAll(tempSetForDuplicates);
				   Collections.sort(value);
			   }
			   //System.err.println(key+" "+value); 
				   for (int d=0; d<indexesOfamount.size(); d++){
					   for (int j=0; j<value.size(); j++){  
						   if (Integer.parseInt(value.get(j)) ==d && counter==1) {
								   sumFirst+=arrayOfamount.get(d);
								   arrayOfamount.set(Integer.parseInt(value.get(0)), sumFirst);
								   
								 	}
						   else if(Integer.parseInt(value.get(j)) ==d && counter==2){
							   		sumSecond +=arrayOfamount.get(d);
							   		arrayOfamount.set(Integer.parseInt(value.get(0)), sumSecond);
						   		}		
					   		}
				   		}
					}//end of for loop of the map
		for (Entry<String, java.util.List<String>> entry : descriptionToindexMap.entrySet()) {
			counter++;   
			key = entry.getKey();
			value = entry.getValue();
		   for (int x=1; x<arrayOfamount.size(); x++){
			   for (int t=1; t<value.size(); t++){
				   
				   if ( Integer.parseInt(value.get(value.size()-1)) < arrayOfamount.size() ){
					   arrayOfamount.remove(Integer.parseInt(value.get(value.size()-1)));
			   	value.remove(value.get(value.size()-1));
				   }
				   else if (Integer.parseInt(value.get(value.size()-1)) > arrayOfamount.size() ){
						value.remove(value.get(value.size()-1));
						arrayOfamount.remove(Integer.parseInt(value.get(value.size()-1)));
				   }
			   }
		   }
		}	   
	}//end of method
*/	
	/*public static Set<String> RemoveDuplicates (ArrayList<String> arrayOfdesc){
		 
		  final Set<String> set1 = new HashSet<String>();
		  final Set <String> setRemoves = new HashSet<>();
		  
		  int i=0;
		  for ( i=0; i<=arrayOfdesc.size(); i++){	   
		   if (i==arrayOfdesc.size()){
			   if (!set1.add(arrayOfdesc.get(i-1) )){ 
				   setRemoves.add(arrayOfdesc.get(i-1));
				   arrayOfdesc.remove(i-1);
			    }    
		   }
		   else if ((i<arrayOfdesc.size())){
		    if (!set1.add(arrayOfdesc.get(i) )){ 
			   setRemoves.add(arrayOfdesc.get(i));
			   arrayOfdesc.remove(i);
		    }    
		    for ( int j=0; j<i; j++){
		    	if (arrayOfdesc.size()>i) {
			    	if (arrayOfdesc.get(i).equals(arrayOfdesc.get(j))){
				    		setRemoves.add(arrayOfdesc.get(j));
				    		arrayOfdesc.remove(i);//i because i want to remove the last of the 
				    							//duplicate elements
				    	}
			    	else if (arrayOfdesc.size()== i){// i want to go further only when the duplicate 
			    								//element has not been deleted by the previous if
			    	//so go down only when the size of the arrayOfdesc is equal the current element
			    	 if (!set1.add(arrayOfdesc.get(i-1) )){ 
						   setRemoves.add(arrayOfdesc.get(i-1));
						   arrayOfdesc.remove(i-1);
		    	 		} 
		    		} 
		    	}
		    }
		  }
		 }
		return setRemoves;
	}*/
	
	/*public ArrayList<String> getThedescOct(){
		return arrayOfdescOct;
	}*/
	
	//public ArrayList<String> getThedescSep(){
		//return arrayOfdescSep;
	//}